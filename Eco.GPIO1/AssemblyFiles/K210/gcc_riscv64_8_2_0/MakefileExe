# source files.
SRC = \
..\..\..\UnitTestFiles\SourceFiles\EcoGPIO1.c
#.\main.c

# include directories
INCLUDES = \
-I ..\..\..\HeaderFiles \
-I ..\..\..\SharedFiles \
-I ..\..\..\..\Eco.Core1\SharedFiles \
-I ..\..\..\..\Eco.InterfaceBus1\SharedFiles \
-I ..\..\..\..\Eco.MemoryManager1\SharedFiles

# libraries directories
LIB_DIR = \
-L ..\..\..\BuildFiles\K210 \
-L$(ECO_FRAMEWORK)/Eco.InterfaceBus1/BuildFiles/Linux \
-L$(ECO_FRAMEWORK)/Eco.FileSystemManagement1/BuildFiles/Linux \
-L$(ECO_FRAMEWORK)/Eco.MemoryManager1/BuildFiles/Linux \
-L$(ECO_FRAMEWORK)/Eco.System1/BuildFiles/Linux

OBJ = $(SRC:.c=.o)

OUT_ELF = EcoGPIO1UnitTest.elf
OUT_BIN = EcoGPIO1UnitTest.bin
OUT_HEX = EcoGPIO1UnitTest.hex
OUT_DIR = ..\..\..\BuildFiles\K210

# C++ compiler flags (-g -O2 -Wall)
CCFLAGS = -Wall -O3 -g -DECO_LIB -DECO_K210 -DUGUID_UTILITY -mcmodel=medany -mabi=lp64f -march=rv64imafc -fno-common -ffunction-sections -fdata-sections -fstrict-volatile-bitfields

# compiler
GNU =$(ECO_TOOLCHAIN)/gcc-riscv64-8.2.0/bin/
CC = riscv64-unknown-elf-gcc
AR = riscv64-unknown-elf-gcc-ar
OC = riscv64-unknown-elf-objcopy

# library paths
#LIBS = $(LIB_DIR) -lkendryte_standalone-sdk -lc -lm -lgcc
LIBS = $(LIB_DIR) -lA70A4C2E9C9645BD91367754D01F101F -lc -lm -lgcc

# linker
LINKERFILE = startup.ld

# compile flags
LDFLAGS = -g $(LIBS) -mcmodel=medany -mabi=lp64f -march=rv64imafc -fno-common -ffunction-sections -fdata-sections -fstrict-volatile-bitfields
.SUFFIXES: .c

.c.o:
	$(GNU)$(CC) $(INCLUDES) $(CCFLAGS) -c $< -o $@ 

$(OUT_ELF): $(OBJ)
	$(GNU)$(CC) ${LDFLAGS} -T $(LINKERFILE) -o $(OUT_DIR)\$(OUT_ELF) $(OBJ) entry.S $(LDFLAGS)
	$(GNU)$(OC) --output-format=binary $(OUT_DIR)\$(OUT_ELF) $(OUT_DIR)\$(OUT_BIN)
	$(GNU)$(OC) -R .rel.dyn -O srec $(OUT_DIR)\$(OUT_ELF) $(OUT_DIR)\$(OUT_HEX)
	del $(OBJ)

clean:
	del $(OBJ) $(OUT_DIR)\$(OUT_ELF)

