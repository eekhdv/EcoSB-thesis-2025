ifeq ($(OS), Windows_NT)
	#WINDOWS USE THESE DEFINITIONS
	RM = -del /q /f
	SLASH = \\
	SWALLOW_OUTPUT = >nul 2>nul
#	TOOLCHAIN =  $(ECO_TOOLCHAIN)/risc-v/bin/
	TOOLCHAIN =  $(ECO_TOOLCHAIN)/Windows/xpack-riscv-none-elf-gcc-13.2.0-1-win32-x64/xpack-riscv-none-elf-gcc-13.2.0-1/bin/
#	TOOL = riscv64-unknown-elf-
	TOOL = riscv-none-elf-
else
	#LINUX USE THESE DEFINITIONS
	RM = -rm -f
	SLASH = /
	SWALLOW_OUTPUT =
	TOOLCHAIN = 
	TOOL = 
endif 

# configuration
PLATFORM_TARGET=EcoOS
ARCH_TARGET=rv64gc
DEVICE_TARGET=D1

ifeq ($(TARGET), 1)
OUT_TARGET = EcoBootLoader
ifeq ($(DEBUG), 1)
CONFIG_TARGET = StaticDebug
CCFLAGS_TARGET = -Wall -g -DECO_LIB
LDFLAGS_TARGET =
else
CONFIG_TARGET = StaticRelease
CCFLAGS_TARGET = -O3 -DECO_LIB
LDFLAGS_TARGET =
endif
else
# Configuration not supported...
endif

# include directories
INC = \
-I ..$(SLASH)..$(SLASH)..$(SLASH)HeaderFiles$(SLASH)RISCV64 \
-I ..$(SLASH)..$(SLASH)..$(SLASH)..$(SLASH)Eco.BootLoader1$(SLASH)HeaderFiles$(SLASH)RISCV64 \
-I ..$(SLASH)..$(SLASH)..$(SLASH)..$(SLASH)Eco.Core1$(SLASH)SharedFiles \
-I ..$(SLASH)..$(SLASH)..$(SLASH)..$(SLASH)Eco.UART1$(SLASH)SharedFiles \
-I ..$(SLASH)..$(SLASH)..$(SLASH)..$(SLASH)Eco.GPIO1$(SLASH)SharedFiles \
-I ..$(SLASH)..$(SLASH)..$(SLASH)..$(SLASH)Eco.DateTime1$(SLASH)SharedFiles

# C source files.
SRC = \
..$(SLASH)..$(SLASH)..$(SLASH)UnitTestFiles$(SLASH)SourceFiles$(SLASH)RISCV64$(SLASH)EcoHead.c \
..$(SLASH)..$(SLASH)..$(SLASH)UnitTestFiles$(SLASH)SourceFiles$(SLASH)RISCV64$(SLASH)EcoBootLoader1.c

# ASM source files.
SRCS = \
..$(SLASH)..$(SLASH)..$(SLASH)UnitTestFiles$(SLASH)SourceFiles$(SLASH)RISCV64$(SLASH)EcoEntry.S

# linker file
LINKERFILE = ..$(SLASH)..$(SLASH)..$(SLASH)UnitTestFiles$(SLASH)SourceFiles$(SLASH)RISCV64$(SLASH)EcoStartup.lds


# libraries directories
LIB_DIR = \
-L ..$(SLASH)..$(SLASH)..$(SLASH)..$(SLASH)Eco.UART1$(SLASH)BuildFiles$(SLASH)$(PLATFORM_TARGET)$(SLASH)$(ARCH_TARGET)$(SLASH)$(DEVICE_TARGET)$(SLASH)$(CONFIG_TARGET)

OBJ = $(SRC:.c=.o)
OBJS = $(SRCS:.S=.o)

OUT_ELF = EcoBootLoader1.elf
OUT_BIN = EcoBootLoader1.bin
OUT_HEX = EcoBootLoader1.hex
OUT_MAP = EcoBootLoader1.map
OUT_DIR = ..$(SLASH)..$(SLASH)..$(SLASH)BuildFiles$(SLASH)$(PLATFORM_TARGET)$(SLASH)$(ARCH_TARGET)$(SLASH)$(DEVICE_TARGET)$(SLASH)$(CONFIG_TARGET)

# C++ compiler flags (-g -O2 -Wall)
CCFLAGS = \
	-g  -Os   -fno-common \
	-ffunction-sections \
	-fno-builtin -ffreestanding \
	-D__KERNEL__  \
	-march=rv64gc\
	-mabi=lp64\
	-fno-stack-protector \
	-Wall \
	-Werror \
	-Wstrict-prototypes \
	-Wno-format-security \
	-Wno-format-nonliteral \
	-fno-delete-null-pointer-checks \
	-pipe -DECO_LIB -DECO_OS -DECO_RISCV64

# compiler
GNU =$(ECO_TOOLCHAIN)/Windows/xpack-riscv-none-elf-gcc-13.2.0-1-win32-x64/xpack-riscv-none-elf-gcc-13.2.0-1/bin/
ECO = $(ECO_TOOLCHAIN)/eco_tools_1_0_0/
CC = $(TOOL)gcc
AR = $(TOOL)gcc-ar
OC = $(TOOL)objcopy
LD = $(TOOL)ld
EL = $(ECO)ecol1

CONFIG_ARCH_RV64I=y
CFG_SUNXI_GPIO_V2=y
CFG_USE_DCACHE=y
CFG_USE_MAEE=y

CFG_BOOT0_RUN_ADDR=0x20000
CFG_SYS_INIT_RAM_SIZE=0x10000
CFG_FES1_RUN_ADDR=0x28000
CFG_SBOOT_RUN_ADDR=0x20480
CFG_SUNXI_MEMOP=y
CFG_ARCH_RISCV=y
BOOT0ADDR = 0x20000
# library paths
LIBS = $(LIB_DIR) -lB40E129B56624BD7B5F8339C025F3EF0

ALL_CFLAGS = -D__ASSEMBLY__  $(CCFLAGS)
export ALL_CFLAGS CPU ARCH PLATFORM BOOT0ADDR


# compile flags
LDFLAGS = --gc-sections -g  $(LIBS)
.SUFFIXES: .c

.c.o:
	$(GNU)$(CC) $(INC) $(CCFLAGS) -c $< -o $@ 

.S.o:
	$(GNU)$(CC) $(INC) -D__ASSEMBLY__  $(CCFLAGS)  -o $@ $< -c 


$(OUT_ELF): $(OBJ) $(OBJS)
	mkdir -p $(OUT_DIR)
	$(GNU)$(LD) ${LDFLAGS} -T$(LINKERFILE) -o $(OUT_DIR)\$(OUT_ELF) $(OBJ) $(OBJS) -Map $(OUT_MAP) ${LDFLAGS}
	$(GNU)$(OC) --output-format=binary $(OUT_DIR)\$(OUT_ELF) $(OUT_DIR)\$(OUT_BIN)
	C:\Users\Vladimir\AppData\Local\Programs\Python\Python311-32\python.exe $(CURDIR)\gen_check_sum $(CURDIR)\$(OUT_DIR)\$(OUT_BIN) boot0_spl.bin
#	rm $(OBJ) $(OBJS)

clean:
	rm $(OBJ) $(OBJS) $(OUT_DIR)/$(OUT)


